#!/usr/bin/env python3

import os, sys
import numpy as np, gzip, shutil
import nibabel as ni
import matlab.engine

dwd = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(dwd, 'utils'))
import mpdenoise_sj as mp #pylint: disable=import-error

def usage(cmdline): #pylint: disable=unused-variable
    from mrtrix3 import app #pylint: disable=no-name-in-module, import-outside-toplevel
    cmdline.set_author('Benjamin Ades-Aron (benjamin.ades-aron@nyumc.org)')
    cmdline.set_synopsis("""1. pre-check: concatenate all dwi series and make sure the all diffusion AP images and PA image have the same matrix dimensions/orientations 
 						
                        2. denoise the complete dataset\n
						
                        3. gibbs ringing correction on complete dataset\n
 						
                        4. If multiple diffusion series are input, do rigid boy alignment\n
 						
                        5. topup + eddy, rotate output bvecs\n
 						
                        6. perform b1 bias correction on each dwi subset\n
 						
                        7. CSF excluded smoothing\n
                        
                        8. Rician bias correction\n
                        
                        9. Normalization to white matter in first b0 image\n
 						
                        10. irwlls outlier map, cwlls dki fit\n
 						
                        11. outlier detection and removal""")
    cmdline.add_citation('Veraart, J.; Novikov, D.S.; Christiaens, D.; Ades-aron, B.; Sijbers, J. & Fieremans, E. Denoising of diffusion MRI using random matrix theory. NeuroImage, 2016, 142, 394-406, doi: 10.1016/j.neuroimage.2016.08.016',is_external=True)
    cmdline.add_citation('Veraart, J.; Fieremans, E. & Novikov, D.S. Diffusion MRI noise mapping using random matrix theory. Magn. Res. Med., 2016, 76(5), 1582-1593, doi:10.1002/mrm.26059',is_external=True)
    cmdline.add_citation('Kellner, E., et al., Gibbs-Ringing Artifact Removal Based on Local Subvoxel-Shifts. Magnetic Resonance in Medicine, 2016. 76(5): p. 1574-1581.',is_external=True)
    cmdline.add_citation('Koay, C.G. and P.J. Basser, Analytically exact correction scheme for signal extraction from noisy magnitude MR signals. Journal of Magnetic Resonance, 2006. 179(2): p. 317-322.',is_external=True)
    cmdline.add_citation('Andersson, J. L. & Sotiropoulos, S. N. An integrated approach to correction for off-resonance effects and subject movement in diffusion MR imaging. NeuroImage, 2015, 125, 1063-1078', is_external=True)
    cmdline.add_citation('Smith, S. M.; Jenkinson, M.; Woolrich, M. W.; Beckmann, C. F.; Behrens, T. E.; Johansen-Berg, H.; Bannister, P. R.; De Luca, M.; Drobnjak, I.; Flitney, D. E.; Niazy, R. K.; Saunders, J.; Vickers, J.; Zhang, Y.; De Stefano, N.; Brady, J. M. & Matthews, P. M. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 2004, 23, S208-S219', is_external=True)
    cmdline.add_citation('Skare, S. & Bammer, R. Jacobian weighting of distortion corrected EPI data. Proceedings of the International Society for Magnetic Resonance in Medicine, 2010, 5063', is_external=True)
    cmdline.add_citation('Andersson, J. L.; Skare, S. & Ashburner, J. How to correct susceptibility distortions in spin-echo echo-planar images: application to diffusion tensor imaging. NeuroImage, 2003, 20, 870-888', is_external=True)
    cmdline.add_citation('Zhang, Y.; Brady, M. & Smith, S. Segmentation of brain MR images through a hidden Markov random field model and the expectation-maximization algorithm. IEEE Transactions on Medical Imaging, 2001, 20, 45-57', is_external=True)
    cmdline.add_citation('Smith, S. M.; Jenkinson, M.; Woolrich, M. W.; Beckmann, C. F.; Behrens, T. E.; Johansen-Berg, H.; Bannister P. R.; De Luca, M.; Drobnjak, I.; Flitney, D. E.; Niazy, R. K.; Saunders, J.; Vickers, J.; Zhang, Y.; DeStefano, N.; Brady, J. M. & Matthews, P. M. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 2004,23, S208-S219', is_external=True)
    cmdline.add_citation('Collier, Q., et al., Iterative reweighted linear least squares for accurate, fast, and robust estimation of diffusion magnetic resonance parameters. Magn Reson Med, 2015. 73(6): p. 2174-84.', is_external=True)
    cmdline.add_argument('input',  help='The input DWI series. For multiple input series, separate file names with commas (i.e. dwi1.nii,dwi2.nii,...)')
    cmdline.add_argument('output', help='The output directory (includes diffusion parameters, kurtosis parameters and processed dwi) unless option -processing_only is used, in which case this is the output basename')
    options = cmdline.add_argument_group('Other options for the DESIGNER script')
    options.add_argument('-denoise', action='store_true', help='Perform dwidenoise')
    options.add_argument('-extent', metavar=('<size>'), help='Denoising extent. Default is 5,5,5')
    options.add_argument('-degibbs', action='store_true', help='Performs (Kellner) Gibbs artifact correction')
    options.add_argument('-rpg', action='store_true', help='Perform (RPG) Gibbs artifact correction. Must include PF factor with -pf (e.g. 6/8, 7/8) and PF dimension -dim (1, 2 or 3 for i, j  or k respectively).')
    options.add_argument('-rician', action='store_true', help='Perform Rician bias correction')
    options.add_argument('-rician_lowsnr', metavar=('<b-value where SNR=2>'), help='Perform Rician bias correction specifying the b-value where snr<2')
    options.add_argument('-prealign', action='store_true', help='If there are multiple input diffusion series, do rigid alignment prior to eddy to maximize motion correction performance')
    options.add_argument('-eddy', action='store_true', help='run fsl eddy (note that if you choose this command you must also choose a phase encoding option')
    options.add_argument('-b1correct', action='store_true', help='Include a bias correction step in dwi preprocessing', default=False)
    options.add_argument('-normalise', action='store_true', help='normalize the dwi volume to median b0 CSF intensity of 1000 (useful for multiple dwi acquisitions)', default=False)
    options.add_argument('-smooth', metavar=('<fwhm>'), help='Include a (csf-free) smoothing step during dwi preprocessing. FWHM is usually 1.20 x voxel size')
    options.add_argument('-smooth_test',action ='store_true',help='test smoothing')
    options.add_argument('-DTIparams', action='store_true', help='Include DTI parameters in output folder (md,ad,rd,fa,eigenvalues, eigenvectors')
    options.add_argument('-DKIparams', action='store_true', help='Include DKI parameters in output folder (mk,ak,rk)')
    options.add_argument('-WMTIparams', action='store_true', help='Include DKI parameters in output folder (awf,ias_params,eas_params)')
    options.add_argument('-akc', action='store_true', help='brute force K tensor outlier rejection')
    options.add_argument('-kcumulants', action='store_true',help='output the kurtosis tensor with W cumulant rather than K')
    options.add_argument('-fitw', action='store_true',help='output the kurtosis tensor with W cumulant rather than K')    
    options.add_argument('-mask', action='store_true',help='compute a brain mask prior to tensor fitting to stip skull and improve efficientcy')
    options.add_argument('-datatype', metavar=('<spec>'), help='If using the "-processing_only" option, you can specify the output datatype. Valid options are float32, float32le, float32be, float64, float64le, float64be, int64, uint64, int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le, int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be, cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be, int8, uint8, bit')
    options.add_argument('-fit_constraints',help='constrain the wlls fit (default 0,1,0)')
    options.add_argument('-fit_smoothing',metavar=('<percentile>'),help='NLM smoothing on wlls fit')
    options.add_argument('-outliers',action='store_true',help='Perform IRWLLS outlier detection')
    options.add_argument('-fslbvec',metavar=('<bvecs>'),help='specify bvec path if path is different from the path to the dwi or the file has an unusual extention')
    options.add_argument('-fslbval',metavar=('<bvals>'),help='specify bval path if path is different from the path to the dwi or the file has an unusual extention')
    mp_options = cmdline.add_argument_group('Options for specifying mp parameters')
    mp_options.add_argument('-shrinkage',metavar=('<shrink>'),help='specify shrinkage type. Options are "threshold" or "frob"', default='threshold')
    mp_options.add_argument('-patchtype',metavar=('<ptype>'),help='specify patchtype. Options are "nonlocal" or "box"', default='nonlocal')
    mp_options.add_argument('-algorithm',metavar=('<alg>'),help='specify MP algorithm. Options are "veraart","cordero-grande","jespersen"',default='cordero-grande')
    rpe_options = cmdline.add_argument_group('Options for specifying the acquisition phase-encoding design')
    rpe_options.add_argument('-rpe_none', action='store_true', help='Specify that no reversed phase-encoding image data is being provided; eddy will perform eddy current and motion correction only')
    rpe_options.add_argument('-rpe_pair', metavar=('<reverse PE b=0 image>'), help='Specify the reverse phase encoding image')
    rpe_options.add_argument('-rpe_all', metavar=('<reverse PE dwi volume>'), help='Specify that ALL DWIs have been acquired with opposing phase-encoding; this information will be used to perform a recombination of image volumes (each pair of volumes with the same b-vector but different phase encoding directions will be combined together into a single volume). The argument to this option is the set of volumes with reverse phase encoding but the same b-vectors as the input image')
    rpe_options.add_argument('-rpe_header', action='store_true', help='Specify that the phase-encoding information can be found in the image header(s), and that this is the information that the script should use')
    rpe_options.add_argument('-pe_dir', metavar=('<phase encoding direction>'), help='Specify the phase encoding direction of the input series (required if using the eddy option). Can be a signed axis number (e.g. -0, 1, +2), an axis designator (e.g. RL, PA, IS), or NIfTI axis codes (e.g. i-, j, k)')
    rpe_options.add_argument('-mb', metavar=('<multi band factor>'), help='specify multiband factor',default='1')
    rpg_options = cmdline.add_argument_group('Options for specifying the PF factor and PF dimension')
    rpg_options.add_argument('-pf', metavar=('<PF factor>'), help='Specify the partial fourier factor (e.g. 7/8, 6/8)')
    rpg_options.add_argument('-dim', metavar=('<PF dimension>'), help='Specify the partial fourier dimension (e.g. 1, 2 or 3 for direction i, j, or k respectively)')

def splitext_(path):
    for ext in ['.tar.gz', '.tar.bz2','.nii.gz']:
        if path.endswith(ext):
            return path[:-len(ext)], path[-len(ext):]
    return os.path.splitext(path)

def execute(): #pylint: disable=unused-variable
    from mrtrix3 import app, fsl, image, path, run #pylint: disable=no-name-in-module, import-outside-toplevel
    from mrtrix3 import CONFIG, MRtrixError #pylint: disable=no-name-in-module, import-outside-toplevel
    designer_root = os.path.dirname(os.path.realpath(__file__))
    DKI_root = os.path.abspath(os.path.join(designer_root,'..'))
    
    app.make_scratch_dir()

    fsl_suffix = fsl.suffix()

    UserCpath = app.ARGS.input.rsplit(',')
    DWIlist = [os.path.realpath(i) for i in UserCpath]
    
    isdicom = False
    for i in DWIlist:
        if not os.path.exists(i):
            print('cannot find input ' + i)
            quit()
        if os.path.isdir(i):
            format = image.Header(i).format()
            if format == 'DICOM':
                isdicom = True
            else:
                raise MRtrixError('input is a directory but does not contain DICOMs, quitting')

    DWIflist = [splitext_(i) for i in DWIlist]
    DWInlist = [i[0] for i in DWIflist]
    DWIext = [i[1] for i in DWIflist]
    miflist = []
    idxlist = []
    dwi_ind_size = [[0,0,0,0]]

    if not app.ARGS.fslbval:
        bvallist = [i + '.bval' for i in DWInlist]
    else:
        UserBvalpath = app.ARGS.fslbval.rsplit(',')
        bvallist = [os.path.realpath(i) for i in UserBvalpath]
    if not app.ARGS.fslbvec:
        bveclist = [i + '.bvec' for i in DWInlist]
    else:
        UserBvecpath = app.ARGS.fslbvec.rsplit(',')
        bveclist = [os.path.realpath(i) for i in UserBvecpath]

    app.goto_scratch_dir()

    if len(DWInlist) == 1:
        if not isdicom:
            run.command('mrconvert -stride -1,2,3,4 -fslgrad ' + bveclist[0] + ' ' + bvallist[0] + ' ' + ''.join(DWInlist) + ''.join(DWIext) + ' ' + 'dwi.mif')
        else:
            run.command('mrconvert -stride -1,2,3,4 ' + ''.join(DWInlist) + ' ' + 'dwi.mif')
    else:
        for idx,i in enumerate(DWInlist):
            if not isdicom:
                run.command('mrconvert -stride -1,2,3,4 -fslgrad ' + bveclist[idx] + ' ' + bvallist[idx] + ' ' + i + DWIext[idx] + ' ' + 'dwi' + str(idx) + '.mif')
            else:
                run.command('mrconvert -stride -1,2,3,4 ' + i + ' ' + 'dwi' + str(idx) + '.mif')
            dwi_header = image.Header('dwi' + str(idx) + '.mif')
            dwi_ind_size.append([ int(s) for s in dwi_header.size() ])
            miflist.append('dwi' + str(idx) + '.mif')
        DWImif = ' '.join(miflist)
        run.command('mrcat -axis 3 ' + DWImif + ' ' + 'dwi.mif')

    # get diffusion header info - check to make sure all values are valid for processing
    dwi_header = image.Header('dwi.mif')
    dwi_size = [ int(s) for s in dwi_header.size() ]
    grad = dwi_header.keyval()['dw_scheme']
    grad = [ line for line in grad ]
    grad = [ [ float(f) for f in line ] for line in grad ]
    #stride = dwi_header.strides()
    num_volumes = 1
    if len(dwi_size) == 4:
        num_volumes = dwi_size[3]
    bval = [int(i[3]) for i in grad]

    nvols = [i[3] for i in dwi_ind_size]
    for idx,i in enumerate(DWInlist):
        if len(DWInlist) == 1:
            tmpidxlist = range(0,num_volumes)
        else:
            tmpidxlist = range(sum(nvols[:idx+1]),sum(nvols[:idx+1])+nvols[idx+1])
        idxlist.append(','.join(str(i) for i in tmpidxlist))

    # Perform initial checks on input images
    if not grad:
        raise MRtrixError('No diffusion gradient table found')
    if not len(grad) == num_volumes:
        raise MRtrixError('Number of lines in gradient table (' + str(len(grad)) + ') does not match input image (' + str(num_volumes) + ' volumes); check your input data')

    if app.ARGS.extent:
        extent = app.args.extent
        if type(extent) == str:
            extent = extent.split(",")
            extent = [int(i) for i in extent]
    else: 
        extent = 100

    run.command('mrconvert dwi.mif working.mif')

    # denoising
    if app.ARGS.denoise:
        run.command('mrconvert dwi.mif -export_grad_mrtrix grad.txt tmp_dwi.nii')
        nii = ni.load('tmp_dwi.nii')
        
        dwi = np.array(nii.dataobj)
        #sx,sy,sz,N = np.shape(dwi)

        print('...denoising...')
        # nonlocal denoising, no shrinkage
        Signal, Sigma, Nparameters = mp.denoise(dwi, patchtype=app.ARGS.patchtype, shrinkage=app.ARGS.shrinkage, algorithm=app.ARGS.algorithm)
        Sigma[np.isnan(Sigma)] = 0
        
        niout = ni.Nifti1Image(Signal, nii.affine, nii.header)
        niout.header.set_data_dtype(np.float32)
        ni.save(niout, 'tmp_dwidn.nii')
        nii.header["dim"][0] = 3
        nii.header["dim"][4] = 1
        niout = ni.Nifti1Image(Sigma, nii.affine, nii.header)
        niout.header.set_data_dtype(np.float32)
        ni.save(niout, 'tmp_sigma.nii')
        niout = ni.Nifti1Image(Nparameters, nii.affine, nii.header)
        niout.header.set_data_dtype(np.float32)
        ni.save(niout, 'Npars.nii')

        run.command('mrconvert -grad grad.txt tmp_dwidn.nii dwidn.mif')
        run.command('mrconvert tmp_sigma.nii fullnoisemap.mif')
        app.cleanup('tmp_dwi.nii')
        app.cleanup('tmp_dwidn.nii')
        app.cleanup('tmp_sigma.nii')
        app.cleanup('grad.txt')
        
        #run.command('dwidenoise -noise fullnoisemap.mif -estimator Exp2 working.mif dwidn.mif')
        run.command('mrconvert -force dwidn.mif working.mif')

    # kellner gibbs artifact correction
    if app.ARGS.degibbs:
        print("...Kellner degibbsing...")
        run.command('mrdegibbs -nshifts 20 -minW 1 -maxW 3 working.mif dwigc.mif')
        run.command('mrconvert -force dwigc.mif working.mif')

    # rpg gibbs artifact correction
    if app.ARGS.rpg:
        # convert working.mif to nii
        run.command('mrconvert -export_grad_fsl working.bvec working.bval working.mif working.nii')
        print("...Beginning RPG degibbsing")
        os.chdir(designer_root)
        eng = matlab.engine.start_matlab()
        eng.addpath(os.path.join(DKI_root,'utils'), nargout=0)
        eng.runrpg(app.ARGS.pf,int(app.ARGS.dim), path.to_scratch('',True), DKI_root,nargout=0)
        eng.quit()
        app.goto_scratch_dir()
        #convert gibbs corrected nii to .mif
        run.command('mrconvert -force -fslgrad working.bvec working.bval working_rpg.nii working.mif')
        
    # pre-eddy alignment for multiple input series
    if app.ARGS.prealign:
        if len(DWInlist) != 1:
            miflist = []
            for idx,i in enumerate(DWInlist):
                run.command('mrconvert -coord 3 ' + idxlist[idx] + ' working.mif dwipretf' + str(idx) + '.mif')
                run.command('dwiextract -bzero dwipretf' + str(idx) + '.mif - | mrconvert -coord 3 0 - b0pretf' + str(idx) + '.mif')
                if idx > 0:
                    run.command('mrregister -type rigid -noreorientation -rigid rigidXform' + str(idx) + 'to0.txt b0pretf' + str(idx) + '.mif b0pretf0.mif')
                    run.command('mrtransform -reorient_fod no -linear rigidXform' + str(idx) + 'to0.txt dwipretf' + str(idx) + '.mif dwitf' + str(idx) + '.mif')
                    miflist.append('dwitf' + str(idx) + '.mif')
            DWImif = ' '.join(miflist)
            run.command('mrcat -axis 3 dwipretf0.mif ' + DWImif + ' dwitf.mif')
            run.command('mrconvert -force dwitf.mif working.mif')

    # epi + eddy current and motion correction
    # if number of input volumes is greater than 1, make a new acqp and index file.
    if app.ARGS.eddy:
        # eddyindexlist = [(i+1)*np.ones((1,nvols[(i+1)])) for i in range(len(DWInlist))]
        # eddyindex = np.hstack(eddyindexlist)
        # np.savetxt('eddyindex.txt',eddyindex,fmt="%d")
        # idxpath = path.to_scratch('eddyindex.txt')

        # acqp = np.zeros((len(DWInlist),4))
        # for i in range(len(DWInlist)):
        #     if app.ARGS.pe_dir == 'AP' or app.ARGS.pe_dir == '-j':
        #         acqp[i,:] = (0,-1,0,0.1)
        #     if app.ARGS.pe_dir == 'PA' or app.ARGS.pe_dir == 'j':
        #         acqp[i,:] = (0,1,0,0.1)
        #     if app.ARGS.pe_dir == 'LR' or app.ARGS.pe_dir == 'i':
        #         acqp[i,:] = (1,0,0,0.1)
        #     if app.ARGS.pe_dir == 'RL' or app.ARGS.pe_dir == '-i':
        #         acqp[i,:] = (-1,0,0,0.1)
        #     if app.ARGS.pe_dir == 'IS' or app.ARGS.pe_dir == 'k':
        #         acqp[i,:] = (0,0,1,0.1)
        #     if app.ARGS.pe_dir == 'SI' or app.ARGS.pe_dir == '-k':
        #         acqp[i,:] = (0,0,-1,0.1)
        # np.savetxt('eddyacqp.txt',acqp,fmt="%1.1f")
        # acqpath = path.to_scratch('eddyacqp.txt')

        print("...Eddy current, EPI, motion correction...")
        #eddyopts = '" --cnr_maps --repol --data_is_shelled --ol_type=both --mb=' + app.ARGS.mb + ' "'
        #print('dwifslpreproc -nocleanup -scratch ' + path.to_scratch('',True) + '/eddy_processing' + ' -eddy_options ' + eddyopts + ' -rpe_none -pe_dir ' + app.ARGS.pe_dir + ' working.mif dwiec.mif')
        if app.ARGS.rpe_none:
            eddyopts = '" --cnr_maps --repol --data_is_shelled "'
            #run.command('dwifslpreproc -nocleanup -eddy_options " --index=' + idxpath + ' --repol --data_is_shelled" -rpe_none -pe_dir ' + app.ARGS.pe_dir + ' working.mif dwiec.mif')
            run.command('dwifslpreproc -nocleanup -scratch ' + path.to_scratch('',True) + '/eddy_processing' + ' -eddy_options ' + eddyopts + ' -rpe_none -pe_dir ' + app.ARGS.pe_dir + ' working.mif dwiec.mif')
        elif app.ARGS.rpe_pair:
            eddyopts = '" --cnr_maps --repol --data_is_shelled"'
            run.command('dwiextract -bzero dwi.mif - | mrconvert -coord 3 0 - b0pe.nii')
            rpe_size = [ int(s) for s in image.Header(path.from_user(app.ARGS.rpe_pair)).size() ]
            if len(rpe_size) == 4:
                run.command('mrconvert -coord 3 0 ' + path.from_user(app.ARGS.rpe_pair) + ' b0rpe.nii')
            else: 
                run.command('mrconvert ' + path.from_user(app.ARGS.rpe_pair) + ' b0rpe.nii')
            run.command('flirt -in b0rpe.nii -ref b0pe.nii -dof 6 -out b0rpe2pe.nii.gz')
            run.command('mrcat -axis 3 b0pe.nii b0rpe2pe.nii.gz rpepair.mif')
            #run.command('dwifslpreproc -nocleanup -eddy_options " --acqp=' + acqpath + ' --index=' + idxpath + ' --repol --data_is_shelled" -rpe_pair -se_epi rpepair.mif -align_seepi -pe_dir ' + app.ARGS.pe_dir + ' working.mif dwiec.mif')
            run.command('dwifslpreproc -nocleanup -scratch ' + path.to_scratch('',True) + '/eddy_processing' + ' -eddy_options ' + eddyopts + ' -rpe_pair -se_epi rpepair.mif -align_seepi -pe_dir ' + app.ARGS.pe_dir + ' working.mif dwiec.mif')
        elif app.ARGS.rpe_all:
            eddyopts = '" --cnr_maps --repol --data_is_shelled"'
            run.command('mrconvert -export_grad_mrtrix grad.txt dwi.mif tmp.mif')
            run.command('mrconvert -grad grad.txt ' + path.from_user(app.ARGS.rpe_all) + ' dwirpe.mif')
            run.command('mrcat -axis 3 working.mif dwirpe.mif dwipe_rpe.mif')
            run.command('dwifslpreproc -nocleanup -eddy_options ' + eddyopts + ' -rpe_all -pe_dir ' + app.ARGS.pe_dir + ' dwipe_rpe.mif dwiec.mif')
            run.function(os.remove,'tmp.mif')
        elif app.ARGS.rpe_header:
            eddyopts = '" --cnr_maps --repol --data_is_shelled"'
            run.command('dwifslpreproc -nocleanup -eddy_options ' + eddyopts + ' -rpe_header working.mif dwiec.mif')
        elif not app.ARGS.rpe_header and not app.ARGS.rpe_all and not app.ARGS.rpe_pair:
            print("the eddy option must run alongside -rpe_header, -rpe_all, or -rpe_pair option")
            quit()
        run.command('mrconvert -force dwiec.mif working.mif')

    # b1 bias field correction
    if app.ARGS.b1correct:
        print("...B1 correction...")
        if len(DWInlist) == 1:
            run.command('dwibiascorrect ants -bias biasfield.mif working.mif dwibc.mif')
        else:
            # b1 correction may still need to be done individually for each diffusion series ...
            miflist = []
            for idx,i in enumerate(DWInlist):
                run.command('mrconvert -coord 3 ' + idxlist[idx] + ' working.mif dwiprebc' + str(idx) + '.mif')
                run.command('dwibiascorrect ants -bias biasfield' + str(idx) + '.mif dwiprebc' + str(idx) + '.mif dwibc' + str(idx) + '.mif')
                miflist.append('dwibc' + str(idx) + '.mif')
                DWImif = ' '.join(miflist)
            run.command('mrcat -axis 3 ' + DWImif + ' dwibc.mif')
        run.command('mrconvert -force dwibc.mif working.mif')

    # generate a final brainmask
    if app.ARGS.mask or app.ARGS.smooth or app.ARGS.normalise:
        print("...Computing brain mask")
        run.command('dwiextract -bzero working.mif - | mrmath -axis 3 - mean b0bc.nii')
        # run.command('dwi2mask dwibc.mif - | maskfilter - dilate brain_mask.nii')
        # run.command('fslmaths b0bc.nii -mas brain_mask.nii brain')
        run.command('bet b0bc.nii brain' + fsl_suffix + ' -m -f 0.25')
    if os.path.isfile('brain_mask.nii.gz'):
        with gzip.open('brain_mask' + fsl_suffix, 'rb') as f_in, open('brain_mask.nii', 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)
        run.function(os.remove,'brain_mask' + fsl_suffix)

    if app.ARGS.smooth:
        print("...Computing CSF mask")
        run.command('mrconvert -force -export_grad_mrtrix grad.txt working.mif dwibc.nii')
        run.command('fast -n 4 -t 2 -o tissue brain' + fsl_suffix)
        csfclass = []
        for i in range(4):
            run.command('fslmaths tissue_pve_' + str(i) + fsl_suffix + ' -thr 0.95 -bin tissue_pve_thr' + str(i) + fsl_suffix)
            csfclass.append(float(run.command('fslstats brain' + fsl_suffix + ' -k ' + 'tissue_pve_thr' + str(i) + fsl_suffix + ' -P 95')[0]))
        csfind = np.argmax(csfclass)
        run.command('fslmaths tissue_pve_' + str(csfind) + fsl_suffix + ' -thr 0.7 -bin CSFmask' + fsl_suffix)
        if fsl_suffix.endswith('.nii.gz'):
            run.command('mrconvert CSFmask' + fsl_suffix + ' CSFmask.nii')

    # smoothing (excluding CSF)
    if app.ARGS.smooth:
        print("...Beginning smoothing")
        os.chdir(designer_root)
        eng = matlab.engine.start_matlab()
        eng.addpath(os.path.join(DKI_root,'utils'), nargout=0)
        eng.runsmoothing(path.to_scratch(''), app.ARGS.smooth, DKI_root,nargout=0)
        eng.quit()
        app.goto_scratch_dir()
        run.command('mrconvert -grad grad.txt dwism.nii dwism.mif')
        run.command('mrconvert -force dwism.mif working.mif')

    if app.ARGS.smooth_test:
        run.command('mrfilter -fwhm 2.5 -extent 3 -force dwiec.mif smooth working.mif')

    run.command('mrinfo -export_grad_fsl dwi_designer.bvec dwi_designer.bval working.mif')

    # rician bias correction
    if app.ARGS.rician and app.ARGS.rician_lowsnr:
        print("...Choosing low snr Rician Bias correction")
        app.ARGS.rician = 0
    if app.ARGS.rician:
        print("...Beginning Rician correction")
        if app.ARGS.denoise:
            run.command('mrcalc fullnoisemap.mif -finite fullnoisemap.mif 0 -if lowbnoisemap.mif')
            run.command('mrcalc working.mif 2 -pow lowbnoisemap.mif 2 -pow -sub -abs -sqrt - | mrcalc - -finite - 0 -if dwirc.mif')
        else:
            run.command('dwidenoise -noise lowbnoisemap.mif -estimator Exp2 dwi.mif dwitmp.mif')
            app.cleanup('dwitmp.mif')
            run.command('mrcalc working.mif 2 -pow lowbnoisemap.mif 2 -pow -sub -abs -sqrt - | mrcalc - -finite - 0 -if dwirc.mif')
        run.command('mrconvert -force dwirc.mif working.mif')
    elif app.ARGS.rician_lowsnr:
        print("...Beginning Rician correction")
        bvalu = np.unique(np.around(bval, decimals=-1))
        lowbval = [i for i in bvalu if i<=np.int(app.args.rician_lowsnr)]
        #lowbinds = np.array(np.squeeze(np.where(np.isin(bval, lowbval))))
        lowbvalstr = ','.join(str(i) for i in lowbval)
        run.command('dwiextract -shell ' + lowbvalstr + ' dwi.mif dwilowb.mif')
        run.command('dwidenoise -noise lowbnoisemap.mif -estimator Exp2 dwilowb.mif dwitmp.mif')
        app.cleanup('dwitmp')
        run.command('mrcalc working.mif 2 -pow lowbnoisemap.mif 2 -pow -sub -abs -sqrt - | mrcalc - -finite - 0 -if dwirc.mif')
        run.command('mrconvert -force dwirc.mif working.mif')

    # b0 normalisation
    if app.ARGS.normalise:
        print("...Beginning normalisation")
        if app.ARGS.normalise and not app.ARGS.b1correct:
            if not len(DWInlist) == 1:
                miflist = []
                for idx,i in enumerate(DWInlist):
                    run.command('mrconvert -coord 3 ' + idxlist[idx] + ' working.mif dwiprenm' + str(idx) + '.mif')
                    run.command('dwiextract dwiprenm' + str(idx) + '.mif - -bzero | mrmath - mean mean_bzero_prenm' + str(idx) + '.mif -axis 3')
                    run.command('mrfilter -stdev 3 mean_bzero_prenm' + str(idx) + '.mif smooth mean_bzero_sm' + str(idx) + '.mif')
                    miflist.append('mean_bzero_sm' + str(idx) + '.mif')
                nmlist = []
                nmlist.append('dwiprenm0.mif')
                for idx,i in enumerate(miflist[1:]):
                    run.command('mrcalc ' + miflist[0] + ' ' + i + ' -div ratio0to' + str(idx+1) + '.mif')
                    run.command('mrcalc dwiprenm' + str(idx+1) + '.mif ratio0to' + str(idx+1) + '.mif -mult dwinm' + str(idx+1) + '.mif')
                    nmlist.append('dwinm' + str(idx+1) + '.mif')
                    DWImif = ' '.join(nmlist)
                run.command('mrcat -axis 3 ' + DWImif + ' dwinm.mif')
                run.command('mrconvert -force dwinm.mif working.mif')
        elif app.ARGS.normalise and app.ARGS.b1correct:
            if not len(DWInlist) == 1:
                for idx,i in enumerate(DWInlist):
                    run.command('mrconvert -force -coord 3 ' + idxlist[idx] + ' working.mif dwiprenm' + str(idx) + '.mif')
                nmlist = []
                nmlist.append('dwiprenm0.mif')
                for idx,i in enumerate(DWInlist[1:]):
                    run.command('mrcalc -force biasfield0.mif biasfield' + str(idx+1) + '.mif' + ' -div ratio0to' + str(idx+1) + '.mif')
                    run.command('mrcalc -force dwiprenm' + str(idx+1) + '.mif ratio0to' + str(idx+1) + '.mif -mult dwinm' + str(idx+1) + '.mif')
                    nmlist.append('dwinm' + str(idx+1) + '.mif')
                    DWImif = ' '.join(nmlist)
                run.command('mrcat -axis 3 ' + DWImif + ' dwinm.mif')
                run.command('mrconvert -force dwinm.mif working.mif')


    run.command('mrconvert -force -datatype float32le working.mif dwi_designer.nii')
    run.function(os.remove,'working.mif')

    if app.ARGS.DTIparams or app.ARGS.DKIparams or app.ARGS.WMTIparams:
        if not os.path.exists(path.from_user(app.ARGS.output, True)):
            os.makedirs(path.from_user(app.ARGS.output, True))
        shutil.copyfile(path.to_scratch('dwi_designer.nii',True),path.from_user(app.ARGS.output + '/dwi_designer.nii', True))
        shutil.copyfile(path.to_scratch('dwi_designer.bvec',True),path.from_user(app.ARGS.output + '/dwi_designer.bvec', True))
        shutil.copyfile(path.to_scratch('dwi_designer.bval',True),path.from_user(app.ARGS.output + '/dwi_designer.bval', True))
        
        print("...Beginning tensor estimation")
        os.chdir(designer_root)
        eng = matlab.engine.start_matlab()
        eng.addpath(os.path.join(DKI_root,'utils'), nargout=0)

        outliers=0
        if app.ARGS.outliers:
            outliers=1
        DTI=0
        if app.ARGS.DTIparams:
            DTI=1
        DKI=0
        if app.ARGS.DKIparams:
            DKI=1
        WMTI=0
        if app.ARGS.WMTIparams:
            WMTI=1
        constraints=0
        if app.ARGS.fit_constraints:
            constraints=app.ARGS.fit_constraints
        AKC=0
        if app.ARGS.akc:
            AKC=1
        KCUM=0
        if app.ARGS.kcumulants:
            KCUM=1
        fitW=0
        if app.ARGS.fitw:
            fitW=1
        fitsmooth=0
        if app.ARGS.fit_smoothing:
            fitsmooth=app.ARGS.fit_smoothing

        eng.tensorfitting(path.to_scratch('',True),path.from_user(app.ARGS.output, True),outliers,KCUM,DTI,DKI,WMTI,constraints,AKC,DKI_root,fitW,fitsmooth,nargout=0)
        eng.quit()
        app.goto_scratch_dir()
    else:
        if app.ARGS.datatype:
            run.command('mrconvert -datatype ' + app.ARGS.datatype + ' ' + path.to_scratch('dwi_designer.nii',True) + ' ' + path.from_user(app.ARGS.output + '.nii',True))
        else:
            shutil.copyfile(path.to_scratch('dwi_designer.nii',True),path.from_user(app.ARGS.output + '.nii',True))
        shutil.copyfile(path.to_scratch('dwi_designer.bvec',True),path.from_user(app.ARGS.output + '.bvec',True))
        shutil.copyfile(path.to_scratch('dwi_designer.bval',True),path.from_user(app.ARGS.output + '.bval',True))

import mrtrix3
mrtrix3.execute() #pylint: disable=no-member

